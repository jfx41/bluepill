#!/bin/bash

# root check
if [ $(id -g) != 0 ]
then
	echo "You need root: maybe sudo ?"
	exit 1
fi

# Packages we need to make things work
deps="git wget inotify-tools"

# Ubuntu packages to install
apt_pkgs="apparmor-utils clamav chkrootkit fail2ban lynis libapache2-mod-security2 modsecurity-crs"
apt_rmpkgs="netcat build-essential autoconf make gcc g++ python perl ruby"

# CentOS packages to install
yum_pkgs="clamav clamav-server clamav-data clamav-update clamav-filesystem clamav-scanner-systemd clamav-devel clamav-lib clamav-server-systemd fail2ban lynis mod_security mod_security_crs"
yumt_rmpkgs="netcat autoconf make gcc g++ python perl ruby"

# Touch these files so fail2ban will start
apache_touch="access.log error.log modsec_audit.log"

# False for identified OSes
ubuntu=0
centos=0
unknown=0

# Partitions & Maldet directories
partitions="/tmp /home /var /var/tmp /var/log /var/www /var/www/html"
maldet_dirs="/tmp /etc /home /var/tmp /var/www/html"

# By default we won't remount
remount=0

# Which version of Linux are we working with
#os=$(uname -n | tr '[A-Z]' '[a-z]')

# If the uname approach fails, check for Ubuntu the LSB way
if [ -f /etc/lsb-release ]
then
	source /etc/lsb-release
	os=$(echo $DISTRIB_ID | tr '[A-Z]' '[a-z]')
	if [ $os == "ubuntu" ]
	then
		ubuntu=1
		version=$DISTRIB_CODENAME
	fi
elif [ -f /etc/redhat-release ]
then
	centos=1
	version=$(cat /etc/redhat-release | cut -f4 -d' ' | cut -f1 -d.)
fi

if [ $ubuntu == 1 ]
then
	# Install deps
	apt-get install -y $deps

	# ● apparmor.service - LSB: AppArmor initialization
	#    Loaded: loaded (/etc/init.d/apparmor; bad; vendor preset: enabled)
	#    Active: active (exited) since Fri 2018-02-02 16:25:50 PST; 19min ago
	#      Docs: man:systemd-sysv-generator(8)
	#   Process: 387 ExecStart=/etc/init.d/apparmor start (code=exited, status=0/SUCCESS)

	# Feb 02 16:25:50 ubuntu systemd[1]: Starting LSB: AppArmor initialization...
	# Feb 02 16:25:50 ubuntu apparmor[387]:  * Starting AppArmor profiles
	# Feb 02 16:25:50 ubuntu apparmor[387]: Skipping profile in /etc/apparmor.d/disable: usr.sbin.rsyslogd
	# Feb 02 16:25:50 ubuntu apparmor[387]:    ...done.
	# Feb 02 16:25:50 ubuntu systemd[1]: Started LSB: AppArmor initialization.

	apparmor=$(service apparmor status | grep -Eo 'active|inactive')

	if [ $apparmor == "active" ]
	then
		# Screw it .. enforce everything
		echo "AppArmor: enforcing all the things ..."
		aa-enforce /etc/apparmor.d/*
		systemctl reload apparmor.service
	elif [ $apparmor == "inactive" ]
	then
		# Enable AppArmor and enfore all policies
		systemctl apparmor enable

		aa-enforce /etc/apparmor.d/*
		systemctl start apparmor
	# Not sure if we'll ever get here
	else
		echo "AppArmor: got an unknown state.  Is it installed?"
	fi


	# Install all the Ubuntu packages
	echo "Installing: $apt_pkgs"
	apt-get install -y $apt_pkgs

	# Needed for fail2ban to start
	echo "Touching files needed for fail2ban"
	mkdir -p /var/log/apache2
	for file in $apache_touch
	do
		touch /var/log/apache2/$file
	done

	#
	# Installing OSSEC
	#

	# Add Apt sources.lst
	#wget -q -O - https://updates.atomicorp.com/installers/atomic | bash

	# Update apt data
	#apt-get update

	# Agent
	#apt-get install ossec-hids-agent

	# Remove dangerous packages
	#echo "Removing dangerous packages"
	#apt-get purge -y $apt_rmpkgs

elif [ $centos == 1 ]
then
	# Install deps
	yum install -y $deps
 	yum install -y epel-release # We need this for fail2ban

	# Set SELinux to enforcing
	echo "Setting SELinux to: enforcing"
	setenforce enforcing

	# Make the change persistent for reboots
	sed -i 's/SELINUX=*/SELINUX=enforcing/' /etc/selinux/config


	# Install all the CentOS packages
	echo "Installing: $yum_pkgs"
	yum install -y $yum_pkgs

	# Needed for fail2ban to start
	echo "Touching files needed for fail2ban"
	mkdir -p /var/log/httpd
	for file in $apache_touch
	do
		touch /var/log/httpd/$file
	done

	# Add Yum repo configuration
	#wget -q -O - https://updates.atomicorp.com/installers/atomic | sudo bash

	# Agent
	#sudo yum install ossec-hids-agent

	# Remove dangerous packages
	#echo "Removing dangerous packages: "
	#yum uninstall -y $yum_rmpkgs
fi


#
# Distro agnostic hardening
#

# Add some fail2ban configurations
cat <<EOC > /etc/fail2ban/jail.d/apache.conf
[apache-auth]
enabled = true

[apache-badbots]
enabled = true

[apache-noscript]
enabled = true

[apache-overflows]
enabled = true

[apache-nohome]
enabled = true

[apache-botsearch]
enabled = true

[apache-fakegooglebot]
enabled = true

[apache-modsecurity]
enabled = true

[apache-shellshock]
enabled = true

EOC

cat <<EOC > /etc/fail2ban/jail.d/ssh.conf
[sshd]
enabled = true

[sshd-ddos]
enabled = true

[dropbear]
enabled = true
EOC

cat <<EOC >> /etc/fail2ban/jail.conf

[modsec]
enabled  = true
filter   = modsec
action   = iptables-multiport[name=ModSec, port="http,https"]
logpath  = /var/log/apache2/modsec_audit.log
bantime  = 1728000
maxretry = 1

EOC

cat <<EOC > /etc/fail2ban/filter.d/modsec.conf
[Definition]
failregex = \[.*?\]\s[\w-]*\s<HOST>\s
ignoreregex =

EOC

# Start fail2ban
service fail2ban restart

#
# Maldet installation
#
echo "Installing: Malware Detection (maldet)"
cd /tmp

git clone https://github.com/rfxn/linux-malware-detect.git
#wget http://www.rfxn.com/downloads/maldetect-current.tar.gz 
#tar -xzvf mal-detect-current.tar.gz
#cd maldetect-1.6.2

cd linux-malware-detect

# Set scan_user_access=1 before we install
sed -i 's/scan_user_access="0"/scan_user_access="1"/g' files/conf.maldet
./install.sh

for dir in maldet_dirs
do
	echo "Starting maldet monitoring on: $dir"
	/usr/local/sbin/maldet -m $dir
done
cd ..

# Clean up artificats
rm -rf linux-malware-detect

# Network hardening
cat <<EOH >> /etc/sysctl.conf
# Enable randomized virtual memory region placement
kernel.randomize_va_space = 1

# Enable IP spoofing protection
net.ipv4.conf.all.rp_filter = 1

# Disable IP source routing
net.ipv4.conf.all.accept_source_route = 0

# Ignoring broadcasts request
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Make sure spoofed packets get logged
net.ipv4.conf.all.log_martians = 1

# Disable memory dumps
fs.suid_dumpable = 0

# Disable IPv6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOH

# Apply our changes
sysctl -p


#
# file system hardening
#

# Lock down /boot if there is a /boot partiton
found=$(grep /boot /etc/fstab)

if [ ! -z "$found" ]
then
	echo "Trying to check and harden partition: /boot"
	# Make /boot read-only
	sed -i 's~\(.*/boot.*defaults\)~\1,ro~' /etc/fstab
	mount -o remount,ro /boot
fi

unset found # Gonna set this again

# Lock down some partitions if they happen to exist
for part in $partitions
do
	found=$(grep $part /etc/fstab)

	echo "Trying to check and harden partition: $part"
	if [ ! -z "$found" ]
	then
		sed -i "s~\(.*${part}.*defaults\)~\1,nosuid,noexec,nodev~" /etc/fstab
		remount=1
	fi
done

if [ $remount == 1 ]
then
	echo "Remounting all partitions with hardening configurations"
	# Remount everything
	mount -o remount -a
fi


#
# A whole pile of file permissions
#

echo "Setting file permissions on a bunch of stuff ..."

chown root:root /etc/anacrontab
chmod og-rwx /etc/anacrontab
chown root:root /etc/crontab
chmod og-rwx /etc/crontab
chown root:root /etc/cron.hourly
chmod og-rwx /etc/cron.hourly
chown root:root /etc/cron.daily
chmod og-rwx /etc/cron.daily
chown root:root /etc/cron.weekly
chmod og-rwx /etc/cron.weekly
chown root:root /etc/cron.monthly
chmod og-rwx /etc/cron.monthly
chown root:root /etc/cron.d
chmod og-rwx /etc/cron.d

# Set the right and permissions on “/var/spool/cron” for root crontab
if [ $ubuntu ]
then
	chown root:root /var/spool/cron/crontabs/root
	chmod og-rwx /var/spool/cron/crontabs/root
elif [ $centos ]
then
	chown root:root /var/spool/cron/root
	chmod og-rwx /var/spool/cron/root
fi

# Set User/Group Owner and Permission on “passwd” file

chmod 644 /etc/passwd
chown root:root /etc/passwd

# Set User/Group Owner and Permission on the “group” file

chmod 644 /etc/group
chown root:root /etc/group

#Set User/Group Owner and Permission on the “shadow” file

chmod 600 /etc/shadow
chown root:root /etc/shadow

# Set User/Group Owner and Permission on the “gshadow” file

chmod 600 /etc/gshadow
chown root:root /etc/gshadow


#
# Now run some malware and hardening scans
#
if [ $ubuntu == 1 ]
then
	echo -n "Waiting for freshclam to install updates "
	i=0
	while [ $i -lt 60 ]
	do
		echo -n .
		i=$((i+1))
		sleep 1s
	done
elif [ $centos == 1 ]
then
	echo "Waiting for freshclam to install updates"
	freshclam
fi

echo "Running Lynis ..."
lynis --quick

echo "Running system wide ClamAV scan."
clamscan --exclude-dir="/var/lib/clamav/" --exclude-dir="^/(proc|sys)/" --exclude-dir="^/usr/local/maldetect*" -i -r /

# Check for empty passwords and lock those accounts
echo "Checking for empty passwords ..."
awk -F: '{ if ($2 == "") print $1 }' /etc/shadow > /tmp/bluepill.$$

count=$(wc -l /tmp/bluepill.$$ | cut -f1 -d' ')

if [ $count -gt 0 ]
then
	echo "Locking $count accounts that had blank passwords:"
	for user in $(cat /tmp/bluepill.$$)
	do
		echo "	Locking: $user"
		usermod -L $user
	done
fi

rm -f /tmp/bluepill.$$ # Cover our tracks

# EOF
